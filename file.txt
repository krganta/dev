Versioning Schemes
There are two types of versioning schemes:

1.Internal
2.Semantic

Semantic Versioning (SemVer) is a specification that defines rules for changing software version numbers. These rules are intended to minimize the pitfalls of version lock (the inability to upgrade a package without having to release new versions of dependent packages) and promiscuity (allowing dependency versions that are incompatible). Under this scheme, version numbers and the way they change convey meaning about the underlying code and what was modified from one version to the next.

Semantic Versioning uses a three-part number, MAJOR.MINOR.PATCH. Each of the parts is incremented according to:

MAJOR, when a change is API-incompatible with previous releases
MINOR, when new functionality is added in a backwards-compatible manner
PATCH, when bug fixes are made in a backward-compatible manner
SemVer provides a shared language for library authors and users to speak about the kind of changes that new releases contain.

Internal version number: This can be incremented many times in a day (e.g. revision control number)
Released version: This changes less often (e.g. semantic versioning)
People use different schemes as per their need, but semantic versioning is fairly widely used and authored by Tom Preston-Werner, cofounder of GitHub.

Semantic Versioning
All versioning uses a semantic versioning approach. In particular:

Given a version number MAJOR.MINOR.PATCH, increment the:

MAJOR version when you make incompatible API changes,
MINOR version when you add functionality in a backwards-compatible manner, and
PATCH version when you make backwards-compatible bug fixes.

Semantic versioning follows the pattern of X.Y.Z

Or more readable would be [major].[minor].[patch]-[build/beta/rc]

Ex. 1.2.0-beta

major or X can be incremented if there are major changes in software, like backward incompatible API release.

minor or Y is incremented if backward compatible APIs are introduced.

patch or Z is incremented after a bug fix.
